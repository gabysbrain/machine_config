#! /usr/bin/env bash

# Original idea from https://github.com/thoughtbot/dotfiles/blob/master/bin/tat
# Attach or create tmux session (and group) named the same as current directory
#
# If there's already a session then find an unattached session of the group
# to attach to, otherwise create a new session in the same group

# if we give a directory then tat to that
if [ $# -eq 1 ]; then
  workdir=$1
else
  workdir="$PWD"
fi

path_name="$(basename "$workdir" | tr . -)"
session_name=${1-$path_name}

group_exists() {
  group_name="$1"
  tmux list-sessions -F '#{?session_group,#{session_group},#{session_name}}' | grep -q "^${group_name}$"
}

# FIXME: might need TMUX='' before new-session commands in case we're inside tmux already

# check to see if there's a group already
if group_exists "${session_name}"; then
  # figure out if there's an unattached session in the group and attach to it
  attach_session=$(tmux list-sessions -F '#{session_attached},#{?session_group,#{session_group},#{session_name}},#{window_id}' | grep '^0,'"${session_name}"',' | cut -d, -f 3 | sort | head -1)
  if [ -z "$attach_session" ]; then
    ## if there's no unattached session then create a new one in the group
    new_session=$(TMUX='' tmux new-session -P -d -t "${session_name}" -c "${workdir}")
    attach_session=$(tmux new-window -P -t "${new_session}")
  fi
else
  # create the group with new-session as detached 
  # and name the session with CWD

  # -P prints the name of the new session
  # -s instead of -t forces the session name to not have the numeric extension
  attach_session=$(TMUX='' tmux new-session -P -d -s "${session_name}" -c "${workdir}")
fi

# finally! 
if [ -z "${TMUX+x}" ]; then # see if we're in tmux already
  tmux attach-session -t "${attach_session}"
else
  tmux switch-client -t "${attach_session}"
fi

